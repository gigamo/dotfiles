#!/bin/zsh
#
# reload zshrc
function src() {
  autoload -U zrecompile
  [[ -f ~/.zshrc ]] && zrecompile -p ~/.zshrc
  for i in "$(find ~/.zsh/ -type f)"; do
    [[ -f $i ]] && zrecompile -p $i
    [[ -f $i.zwc.old ]] && rm -f $i.zwc.old
  done
  [[ -f ~/.zcompdump ]] && zrecompile -p ~/.zcompdump
  [[ -f ~/.zcompdump ]] && zrecompile -p ~/.zcompdump
  [[ -f ~/.zshrc.zwc.old ]] && rm -f ~/.zshrc.zwc.old
  [[ -f ~/.zcompdump.zwc.old ]] && rm -f ~/.zcompdump.zwc.old
  source ~/.zshrc
}

function add-alias() {
  local name=$1 value="$2"
  echo "alias $name='$value'" >> ~/.zsh/alias
  eval "alias $name='$value'"
  alias $name
}

# git functions
function ga() { git add $* }
function gl() { git log $* }
function gs() { git status $* }
function gp() { git push $* }
function gc() { git commit -m "$*" }
function gpl() { git pull $* }
function gco() {
  if [ -z "$1" ]; then
    git checkout master
  else
    git checkout $1
  fi
}

function mkmine() { sudo chown -R ${USER} ${1:-.}; }
# Usage: sanitize <file>
function sanitize() {
    chmod -R u=rwX,go=rX "$@"
    chown -R ${USER}.users "$@"
}

roll() {
  FILE=$1
  case $FILE in
    *.tar.bz2) shift && tar cjf $FILE $* ;;
    *.tar.gz) shift && tar czf $FILE $* ;;
    *.tgz) shift && tar czf $FILE $* ;;
    *.zip) shift && zip $FILE $* ;;
    *.rar) shift && rar $FILE $* ;;
  esac
}

extract_archive() {
  local old_dirs current_dirs lower
  lower=${(L)1}
  old_dirs=( *(N/) )
  if [[ $lower == *.tar.gz || $lower == *.tgz ]]; then
    tar xvzf $1
  elif [[ $lower == *.gz ]]; then
    gunzip $1
  elif [[ $lower == *.tar.bz2 || $lower == *.tbz ]]; then
    tar xvjf $1
  elif [[ $lower == *.bz2 ]]; then
    bunzip2 $1
  elif [[ $lower == *.zip ]]; then
    unzip $1
  elif [[ $lower == *.rar ]]; then
    unrar e $1
  elif [[ $lower == *.tar ]]; then
    tar xvf $1
  elif [[ $lower == *.lha ]]; then
    lha e $1
  else
    print "Unknown archive type: $1"
    return 1
  fi
  # Change in to the newly created directory, and
  # list the directory contents, if there is one.
  current_dirs=( *(N/) )
  for i in {1..${#current_dirs}}; do
    if [[ $current_dirs[$i] != $old_dirs[$i] ]]; then
      cd $current_dirs[$i]
      break
    fi
  done
}

cd() {
  builtin cd "$@"; ls
}
